name: Build and Release PyJi Binary

on:
  push:
    tags:
      - 'v*.*'

env:
  BINARY_NAME: pyji

jobs:
  build:
    name: Build binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform_name: linux-amd64
          - os: windows-latest
            platform_name: windows-amd64
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Устанавливаем зависимости

      - name: Build binary with PyInstaller
        run: |
          pyinstaller --noconsole --onefile main.py

      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}_linux-amd64
          path: dist/main

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}_windows-amd64
          path: dist/main.exe

  release:
    name: Create Release Page
    needs: build
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
  
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  upload:
    name: Upload Release Assets
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform_name: linux-amd64
          - os: windows-latest
            platform_name: windows-amd64
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        name: Download ${{ matrix.platform_name }} artifact
        with:
          name: ${{ env.BINARY_NAME }}_${{ matrix.platform_name }}
          path: ${{ env.BINARY_NAME }}_${{ matrix.platform_name }}
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_NAME }}_${{ matrix.platform_name }}/${{ env.BINARY_NAME }}${{ matrix.platform_name == 'windows-amd64' && '.exe' || '' }}
          asset_name: ${{ env.BINARY_NAME }}_${{ matrix.platform_name }}${{ matrix.platform_name == 'windows-amd64' && '.exe' || '' }}
          asset_content_type: application/octet-stream
